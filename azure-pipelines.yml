# Azure Pipelines configuration
#
# For now we use a single stage and single job (copied for multiple OS/Python
# version combinations) with steps for installing dependencies, building and
# installing the ndsplines package, running the tests, and generating a code
# coverage report. A source distribution and wheels for each platform are also
# built and published as artifacts.
#
# References:
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/pools-queues
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks

# Run the pipeline for commits to master
trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

# Run the pipeline for PRs against master
pr:
  autoCancel: true
  branches:
    include:
      - master

# Omitting stages/jobs hierarchy items because there's only one of each. The
# matrix strategy generates copies of the job spec below for different
# combinations of OS/Python version.
# List of available agents:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
strategy:
  matrix:
    Windows_Py36:
      imageName: 'vs2017-win2016'
      python.version: '3.6'
    Mac_Py36:
      imageName: 'macOS-10.14'
      python.version: '3.6'
    Windows_Py37:
      imageName: 'vs2017-win2016'
      python.version: '3.7'
    Mac_Py37:
      imageName: 'macOS-10.14'
      python.version: '3.7'
    Windows_Py38:
      imageName: 'vs2017-win2016'
      python.version: '3.8'
    Mac_Py38:
      imageName: 'macOS-10.14'
      python.version: '3.8'
    Linux_Py38:
      imageName: 'ubuntu-latest'
      python.version: '3.8'

# Grab an agent from the pool by image name specified by the matrix above
pool:
  vmImage: '$(imageName)'

# Steps to run in each job
steps:

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/use-python-version
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    addToPath: true
  displayName: 'Use Python $(python.version)'

- script: |
    pip install --upgrade pip
    pip install -r requirements-dev.txt
    pip install pytest pytest-azurepipelines pytest-cov wheel
    pip list
  displayName: 'Install dependencies'

- script: |
    python setup.py build_ext --inplace
  displayName: 'Build extension module'

# Install editable so code coverage works
- script: |
    pip install -e .
  displayName: 'Install'

- script: |
    pytest -sv --cov ndsplines
  displayName: 'Test'

- script: |
    bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN)
  displayName: 'Upload coverage report'
  condition: contains(variables['Agent.JobName'], 'Linux')

# Only need one sdist and it shouldn't matter which platform
- script: |
    python setup.py sdist
  condition: contains(variables['Agent.JobName'], 'Linux')
  displayName: 'Build source distribution'

# Build a wheel -- for Win/Mac, we can just go for it
- script: |
    python setup.py bdist_wheel
  condition: not(contains(variables['Agent.JobName'], 'Linux'))
  displayName: 'Build platform wheel'

# For Linux, we need to build a "manylinux" wheel
# https://iscinumpy.gitlab.io/post/azure-devops-python-wheels/
- script: |
    docker run --rm -w /io -v `pwd`:/io quay.io/pypa/manylinux2010_x86_64 /io/build_wheel.sh
  condition: contains(variables['Agent.JobName'], 'Linux')
  displayName: 'Build Linux platform wheels in Docker'

- task: CopyFiles@2
  inputs:
    contents: 'dist/**'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    cleanTargetFolder: true
  displayName: 'Copy dist contents to staging directory'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/dist'
    artifactName: '$(Agent.JobName) '
  displayName: 'Publish artifacts'
